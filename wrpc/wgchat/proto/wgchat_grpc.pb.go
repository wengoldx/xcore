// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/wgchat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WgchatClient is the client API for Wgchat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WgchatClient interface {
	AddStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*CEmpty, error)
	UpdateState(ctx context.Context, in *TagState, opts ...grpc.CallOption) (*CEmpty, error)
	UpdateStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*CEmpty, error)
	DeleteStaff(ctx context.Context, in *TagStaff, opts ...grpc.CallOption) (*CEmpty, error)
	DeleteStaffs(ctx context.Context, in *Staffs, opts ...grpc.CallOption) (*CEmpty, error)
	AddMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*CEmpty, error)
}

type wgchatClient struct {
	cc grpc.ClientConnInterface
}

func NewWgchatClient(cc grpc.ClientConnInterface) WgchatClient {
	return &wgchatClient{cc}
}

func (c *wgchatClient) AddStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*CEmpty, error) {
	out := new(CEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/AddStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wgchatClient) UpdateState(ctx context.Context, in *TagState, opts ...grpc.CallOption) (*CEmpty, error) {
	out := new(CEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wgchatClient) UpdateStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*CEmpty, error) {
	out := new(CEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wgchatClient) DeleteStaff(ctx context.Context, in *TagStaff, opts ...grpc.CallOption) (*CEmpty, error) {
	out := new(CEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/DeleteStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wgchatClient) DeleteStaffs(ctx context.Context, in *Staffs, opts ...grpc.CallOption) (*CEmpty, error) {
	out := new(CEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/DeleteStaffs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wgchatClient) AddMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*CEmpty, error) {
	out := new(CEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/AddMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WgchatServer is the server API for Wgchat service.
// All implementations must embed UnimplementedWgchatServer
// for forward compatibility
type WgchatServer interface {
	AddStaff(context.Context, *Staff) (*CEmpty, error)
	UpdateState(context.Context, *TagState) (*CEmpty, error)
	UpdateStatus(context.Context, *Status) (*CEmpty, error)
	DeleteStaff(context.Context, *TagStaff) (*CEmpty, error)
	DeleteStaffs(context.Context, *Staffs) (*CEmpty, error)
	AddMessage(context.Context, *Message) (*CEmpty, error)
	mustEmbedUnimplementedWgchatServer()
}

// UnimplementedWgchatServer must be embedded to have forward compatible implementations.
type UnimplementedWgchatServer struct {
}

func (UnimplementedWgchatServer) AddStaff(context.Context, *Staff) (*CEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaff not implemented")
}
func (UnimplementedWgchatServer) UpdateState(context.Context, *TagState) (*CEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedWgchatServer) UpdateStatus(context.Context, *Status) (*CEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedWgchatServer) DeleteStaff(context.Context, *TagStaff) (*CEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaff not implemented")
}
func (UnimplementedWgchatServer) DeleteStaffs(context.Context, *Staffs) (*CEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaffs not implemented")
}
func (UnimplementedWgchatServer) AddMessage(context.Context, *Message) (*CEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (UnimplementedWgchatServer) mustEmbedUnimplementedWgchatServer() {}

// UnsafeWgchatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WgchatServer will
// result in compilation errors.
type UnsafeWgchatServer interface {
	mustEmbedUnimplementedWgchatServer()
}

func RegisterWgchatServer(s grpc.ServiceRegistrar, srv WgchatServer) {
	s.RegisterService(&Wgchat_ServiceDesc, srv)
}

func _Wgchat_AddStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Staff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).AddStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/AddStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).AddStaff(ctx, req.(*Staff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wgchat_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).UpdateState(ctx, req.(*TagState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wgchat_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).UpdateStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wgchat_DeleteStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagStaff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).DeleteStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/DeleteStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).DeleteStaff(ctx, req.(*TagStaff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wgchat_DeleteStaffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Staffs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).DeleteStaffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/DeleteStaffs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).DeleteStaffs(ctx, req.(*Staffs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wgchat_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/AddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).AddMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Wgchat_ServiceDesc is the grpc.ServiceDesc for Wgchat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wgchat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.wgchat",
	HandlerType: (*WgchatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStaff",
			Handler:    _Wgchat_AddStaff_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _Wgchat_UpdateState_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Wgchat_UpdateStatus_Handler,
		},
		{
			MethodName: "DeleteStaff",
			Handler:    _Wgchat_DeleteStaff_Handler,
		},
		{
			MethodName: "DeleteStaffs",
			Handler:    _Wgchat_DeleteStaffs_Handler,
		},
		{
			MethodName: "AddMessage",
			Handler:    _Wgchat_AddMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wgchat.proto",
}
