// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/acc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccClient is the client API for Acc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccClient interface {
	// Request token access permission check
	ViaToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*AccPwd, error)
	// Account role access permission check
	ViaRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Result, error)
	// Add account role excepted admin
	AddRole(ctx context.Context, in *TagRole, opts ...grpc.CallOption) (*AEmpty, error)
	// Register account with given role, then return uuid and random password
	// NOTICE that this function not create a admin role account
	AccRegister(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*AccPwd, error)
	// Account login by uuid/phone/email and encryptd password
	AccLogin(ctx context.Context, in *AccPwd, opts ...grpc.CallOption) (*Token, error)
	// Return profiles on role, e.g. get all store composers
	RoleProfiles(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*RoleProfs, error)
	// Return profiles on role, and filter by search conditions
	SearchInRole(ctx context.Context, in *Search, opts ...grpc.CallOption) (*RoleProfs, error)
	// Update account email, it maybe case duplicate entry error when tag email exist in databse
	UpdateEmail(ctx context.Context, in *IDEMail, opts ...grpc.CallOption) (*AEmpty, error)
	// Reset account password and send by email
	ResetSendPwd(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AEmpty, error)
	// Unbind account wechat unionid (clear unionid field directly)
	UnbindWechat(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AEmpty, error)
	// Return account request token by exist user uuid (only for QKS)
	GetToken(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Token, error)
	// Return account emails by given uuids
	GetAccEmails(ctx context.Context, in *UIDS, opts ...grpc.CallOption) (*IDEMails, error)
	// Return account simple profiles
	GetProfile(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Profile, error)
	// Return account contact (contain nickname, phone, email)
	GetContact(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Contact, error)
	// Return account avatars by given uuids
	GetAvatars(ctx context.Context, in *UIDS, opts ...grpc.CallOption) (*Avatars, error)
	// Return account avatars by given uuids and search conditions
	SearchAvatars(ctx context.Context, in *SKeys, opts ...grpc.CallOption) (*Avatars, error)
	// Delete indicated account by given uuid
	DeleteAcc(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AEmpty, error)
	// Register store machine account
	StoreAddMach(ctx context.Context, in *Email, opts ...grpc.CallOption) (*UUID, error)
	// Register store composer account
	StoreAddComp(ctx context.Context, in *Composer, opts ...grpc.CallOption) (*UUID, error)
	// Update store composer email and nickname
	StoreUpComp(ctx context.Context, in *CompSimp, opts ...grpc.CallOption) (*AEmpty, error)
	// Store machine bind with player wechat unionid
	StoreBindWx(ctx context.Context, in *WxBind, opts ...grpc.CallOption) (*AEmpty, error)
	// Store machine unbind player wechat unionid
	StoreUnbindWx(ctx context.Context, in *AccPwd, opts ...grpc.CallOption) (*AEmpty, error)
	// Store composer unbind machine's player wechat unionid
	CompUnbindWx(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AEmpty, error)
	// Store composer reset machine password and send by email
	CompResetPwd(ctx context.Context, in *TagPwd, opts ...grpc.CallOption) (*AEmpty, error)
	// Rename store machine nickname and addresses
	StoreRename(ctx context.Context, in *ProfAddr, opts ...grpc.CallOption) (*AEmpty, error)
	// Return account simple profiles and addresses
	StoreProfile(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*ProfStore, error)
	// Return accounts simple profiles and addresses
	StoreProfiles(ctx context.Context, in *UIDS, opts ...grpc.CallOption) (*ProfStores, error)
	// Return uuids and emails
	GetActiveEmails(ctx context.Context, in *Emails, opts ...grpc.CallOption) (*Emails, error)
	// Send custom mail from QKS web page on custom request.
	SendCustomMail(ctx context.Context, in *SugMail, opts ...grpc.CallOption) (*AEmpty, error)
}

type accClient struct {
	cc grpc.ClientConnInterface
}

func NewAccClient(cc grpc.ClientConnInterface) AccClient {
	return &accClient{cc}
}

func (c *accClient) ViaToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*AccPwd, error) {
	out := new(AccPwd)
	err := c.cc.Invoke(ctx, "/proto.Acc/ViaToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) ViaRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.Acc/ViaRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) AddRole(ctx context.Context, in *TagRole, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) AccRegister(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*AccPwd, error) {
	out := new(AccPwd)
	err := c.cc.Invoke(ctx, "/proto.Acc/AccRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) AccLogin(ctx context.Context, in *AccPwd, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/proto.Acc/AccLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) RoleProfiles(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*RoleProfs, error) {
	out := new(RoleProfs)
	err := c.cc.Invoke(ctx, "/proto.Acc/RoleProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) SearchInRole(ctx context.Context, in *Search, opts ...grpc.CallOption) (*RoleProfs, error) {
	out := new(RoleProfs)
	err := c.cc.Invoke(ctx, "/proto.Acc/SearchInRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) UpdateEmail(ctx context.Context, in *IDEMail, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) ResetSendPwd(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/ResetSendPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) UnbindWechat(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/UnbindWechat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) GetToken(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/proto.Acc/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) GetAccEmails(ctx context.Context, in *UIDS, opts ...grpc.CallOption) (*IDEMails, error) {
	out := new(IDEMails)
	err := c.cc.Invoke(ctx, "/proto.Acc/GetAccEmails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) GetProfile(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/proto.Acc/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) GetContact(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/proto.Acc/GetContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) GetAvatars(ctx context.Context, in *UIDS, opts ...grpc.CallOption) (*Avatars, error) {
	out := new(Avatars)
	err := c.cc.Invoke(ctx, "/proto.Acc/GetAvatars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) SearchAvatars(ctx context.Context, in *SKeys, opts ...grpc.CallOption) (*Avatars, error) {
	out := new(Avatars)
	err := c.cc.Invoke(ctx, "/proto.Acc/SearchAvatars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) DeleteAcc(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/DeleteAcc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) StoreAddMach(ctx context.Context, in *Email, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/proto.Acc/StoreAddMach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) StoreAddComp(ctx context.Context, in *Composer, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/proto.Acc/StoreAddComp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) StoreUpComp(ctx context.Context, in *CompSimp, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/StoreUpComp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) StoreBindWx(ctx context.Context, in *WxBind, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/StoreBindWx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) StoreUnbindWx(ctx context.Context, in *AccPwd, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/StoreUnbindWx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) CompUnbindWx(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/CompUnbindWx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) CompResetPwd(ctx context.Context, in *TagPwd, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/CompResetPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) StoreRename(ctx context.Context, in *ProfAddr, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/StoreRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) StoreProfile(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*ProfStore, error) {
	out := new(ProfStore)
	err := c.cc.Invoke(ctx, "/proto.Acc/StoreProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) StoreProfiles(ctx context.Context, in *UIDS, opts ...grpc.CallOption) (*ProfStores, error) {
	out := new(ProfStores)
	err := c.cc.Invoke(ctx, "/proto.Acc/StoreProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) GetActiveEmails(ctx context.Context, in *Emails, opts ...grpc.CallOption) (*Emails, error) {
	out := new(Emails)
	err := c.cc.Invoke(ctx, "/proto.Acc/GetActiveEmails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accClient) SendCustomMail(ctx context.Context, in *SugMail, opts ...grpc.CallOption) (*AEmpty, error) {
	out := new(AEmpty)
	err := c.cc.Invoke(ctx, "/proto.Acc/SendCustomMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccServer is the server API for Acc service.
// All implementations must embed UnimplementedAccServer
// for forward compatibility
type AccServer interface {
	// Request token access permission check
	ViaToken(context.Context, *Token) (*AccPwd, error)
	// Account role access permission check
	ViaRole(context.Context, *Role) (*Result, error)
	// Add account role excepted admin
	AddRole(context.Context, *TagRole) (*AEmpty, error)
	// Register account with given role, then return uuid and random password
	// NOTICE that this function not create a admin role account
	AccRegister(context.Context, *UserRole) (*AccPwd, error)
	// Account login by uuid/phone/email and encryptd password
	AccLogin(context.Context, *AccPwd) (*Token, error)
	// Return profiles on role, e.g. get all store composers
	RoleProfiles(context.Context, *UserRole) (*RoleProfs, error)
	// Return profiles on role, and filter by search conditions
	SearchInRole(context.Context, *Search) (*RoleProfs, error)
	// Update account email, it maybe case duplicate entry error when tag email exist in databse
	UpdateEmail(context.Context, *IDEMail) (*AEmpty, error)
	// Reset account password and send by email
	ResetSendPwd(context.Context, *UUID) (*AEmpty, error)
	// Unbind account wechat unionid (clear unionid field directly)
	UnbindWechat(context.Context, *UUID) (*AEmpty, error)
	// Return account request token by exist user uuid (only for QKS)
	GetToken(context.Context, *UUID) (*Token, error)
	// Return account emails by given uuids
	GetAccEmails(context.Context, *UIDS) (*IDEMails, error)
	// Return account simple profiles
	GetProfile(context.Context, *UUID) (*Profile, error)
	// Return account contact (contain nickname, phone, email)
	GetContact(context.Context, *UUID) (*Contact, error)
	// Return account avatars by given uuids
	GetAvatars(context.Context, *UIDS) (*Avatars, error)
	// Return account avatars by given uuids and search conditions
	SearchAvatars(context.Context, *SKeys) (*Avatars, error)
	// Delete indicated account by given uuid
	DeleteAcc(context.Context, *UUID) (*AEmpty, error)
	// Register store machine account
	StoreAddMach(context.Context, *Email) (*UUID, error)
	// Register store composer account
	StoreAddComp(context.Context, *Composer) (*UUID, error)
	// Update store composer email and nickname
	StoreUpComp(context.Context, *CompSimp) (*AEmpty, error)
	// Store machine bind with player wechat unionid
	StoreBindWx(context.Context, *WxBind) (*AEmpty, error)
	// Store machine unbind player wechat unionid
	StoreUnbindWx(context.Context, *AccPwd) (*AEmpty, error)
	// Store composer unbind machine's player wechat unionid
	CompUnbindWx(context.Context, *UUID) (*AEmpty, error)
	// Store composer reset machine password and send by email
	CompResetPwd(context.Context, *TagPwd) (*AEmpty, error)
	// Rename store machine nickname and addresses
	StoreRename(context.Context, *ProfAddr) (*AEmpty, error)
	// Return account simple profiles and addresses
	StoreProfile(context.Context, *UUID) (*ProfStore, error)
	// Return accounts simple profiles and addresses
	StoreProfiles(context.Context, *UIDS) (*ProfStores, error)
	// Return uuids and emails
	GetActiveEmails(context.Context, *Emails) (*Emails, error)
	// Send custom mail from QKS web page on custom request.
	SendCustomMail(context.Context, *SugMail) (*AEmpty, error)
	mustEmbedUnimplementedAccServer()
}

// UnimplementedAccServer must be embedded to have forward compatible implementations.
type UnimplementedAccServer struct {
}

func (UnimplementedAccServer) ViaToken(context.Context, *Token) (*AccPwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViaToken not implemented")
}
func (UnimplementedAccServer) ViaRole(context.Context, *Role) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViaRole not implemented")
}
func (UnimplementedAccServer) AddRole(context.Context, *TagRole) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedAccServer) AccRegister(context.Context, *UserRole) (*AccPwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccRegister not implemented")
}
func (UnimplementedAccServer) AccLogin(context.Context, *AccPwd) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccLogin not implemented")
}
func (UnimplementedAccServer) RoleProfiles(context.Context, *UserRole) (*RoleProfs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleProfiles not implemented")
}
func (UnimplementedAccServer) SearchInRole(context.Context, *Search) (*RoleProfs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInRole not implemented")
}
func (UnimplementedAccServer) UpdateEmail(context.Context, *IDEMail) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedAccServer) ResetSendPwd(context.Context, *UUID) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSendPwd not implemented")
}
func (UnimplementedAccServer) UnbindWechat(context.Context, *UUID) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindWechat not implemented")
}
func (UnimplementedAccServer) GetToken(context.Context, *UUID) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAccServer) GetAccEmails(context.Context, *UIDS) (*IDEMails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccEmails not implemented")
}
func (UnimplementedAccServer) GetProfile(context.Context, *UUID) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedAccServer) GetContact(context.Context, *UUID) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedAccServer) GetAvatars(context.Context, *UIDS) (*Avatars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatars not implemented")
}
func (UnimplementedAccServer) SearchAvatars(context.Context, *SKeys) (*Avatars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAvatars not implemented")
}
func (UnimplementedAccServer) DeleteAcc(context.Context, *UUID) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAcc not implemented")
}
func (UnimplementedAccServer) StoreAddMach(context.Context, *Email) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAddMach not implemented")
}
func (UnimplementedAccServer) StoreAddComp(context.Context, *Composer) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAddComp not implemented")
}
func (UnimplementedAccServer) StoreUpComp(context.Context, *CompSimp) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreUpComp not implemented")
}
func (UnimplementedAccServer) StoreBindWx(context.Context, *WxBind) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreBindWx not implemented")
}
func (UnimplementedAccServer) StoreUnbindWx(context.Context, *AccPwd) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreUnbindWx not implemented")
}
func (UnimplementedAccServer) CompUnbindWx(context.Context, *UUID) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompUnbindWx not implemented")
}
func (UnimplementedAccServer) CompResetPwd(context.Context, *TagPwd) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompResetPwd not implemented")
}
func (UnimplementedAccServer) StoreRename(context.Context, *ProfAddr) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRename not implemented")
}
func (UnimplementedAccServer) StoreProfile(context.Context, *UUID) (*ProfStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreProfile not implemented")
}
func (UnimplementedAccServer) StoreProfiles(context.Context, *UIDS) (*ProfStores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreProfiles not implemented")
}
func (UnimplementedAccServer) GetActiveEmails(context.Context, *Emails) (*Emails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveEmails not implemented")
}
func (UnimplementedAccServer) SendCustomMail(context.Context, *SugMail) (*AEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCustomMail not implemented")
}
func (UnimplementedAccServer) mustEmbedUnimplementedAccServer() {}

// UnsafeAccServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccServer will
// result in compilation errors.
type UnsafeAccServer interface {
	mustEmbedUnimplementedAccServer()
}

func RegisterAccServer(s grpc.ServiceRegistrar, srv AccServer) {
	s.RegisterService(&Acc_ServiceDesc, srv)
}

func _Acc_ViaToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).ViaToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/ViaToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).ViaToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_ViaRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).ViaRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/ViaRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).ViaRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).AddRole(ctx, req.(*TagRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_AccRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).AccRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/AccRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).AccRegister(ctx, req.(*UserRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_AccLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccPwd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).AccLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/AccLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).AccLogin(ctx, req.(*AccPwd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_RoleProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).RoleProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/RoleProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).RoleProfiles(ctx, req.(*UserRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_SearchInRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).SearchInRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/SearchInRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).SearchInRole(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDEMail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).UpdateEmail(ctx, req.(*IDEMail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_ResetSendPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).ResetSendPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/ResetSendPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).ResetSendPwd(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_UnbindWechat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).UnbindWechat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/UnbindWechat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).UnbindWechat(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).GetToken(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_GetAccEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).GetAccEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/GetAccEmails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).GetAccEmails(ctx, req.(*UIDS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).GetProfile(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/GetContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).GetContact(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_GetAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).GetAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/GetAvatars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).GetAvatars(ctx, req.(*UIDS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_SearchAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).SearchAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/SearchAvatars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).SearchAvatars(ctx, req.(*SKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_DeleteAcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).DeleteAcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/DeleteAcc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).DeleteAcc(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_StoreAddMach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).StoreAddMach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/StoreAddMach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).StoreAddMach(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_StoreAddComp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Composer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).StoreAddComp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/StoreAddComp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).StoreAddComp(ctx, req.(*Composer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_StoreUpComp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompSimp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).StoreUpComp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/StoreUpComp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).StoreUpComp(ctx, req.(*CompSimp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_StoreBindWx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxBind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).StoreBindWx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/StoreBindWx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).StoreBindWx(ctx, req.(*WxBind))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_StoreUnbindWx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccPwd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).StoreUnbindWx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/StoreUnbindWx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).StoreUnbindWx(ctx, req.(*AccPwd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_CompUnbindWx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).CompUnbindWx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/CompUnbindWx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).CompUnbindWx(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_CompResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagPwd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).CompResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/CompResetPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).CompResetPwd(ctx, req.(*TagPwd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_StoreRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).StoreRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/StoreRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).StoreRename(ctx, req.(*ProfAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_StoreProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).StoreProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/StoreProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).StoreProfile(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_StoreProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).StoreProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/StoreProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).StoreProfiles(ctx, req.(*UIDS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_GetActiveEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Emails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).GetActiveEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/GetActiveEmails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).GetActiveEmails(ctx, req.(*Emails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acc_SendCustomMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SugMail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccServer).SendCustomMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Acc/SendCustomMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccServer).SendCustomMail(ctx, req.(*SugMail))
	}
	return interceptor(ctx, in, info, handler)
}

// Acc_ServiceDesc is the grpc.ServiceDesc for Acc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Acc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Acc",
	HandlerType: (*AccServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ViaToken",
			Handler:    _Acc_ViaToken_Handler,
		},
		{
			MethodName: "ViaRole",
			Handler:    _Acc_ViaRole_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _Acc_AddRole_Handler,
		},
		{
			MethodName: "AccRegister",
			Handler:    _Acc_AccRegister_Handler,
		},
		{
			MethodName: "AccLogin",
			Handler:    _Acc_AccLogin_Handler,
		},
		{
			MethodName: "RoleProfiles",
			Handler:    _Acc_RoleProfiles_Handler,
		},
		{
			MethodName: "SearchInRole",
			Handler:    _Acc_SearchInRole_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _Acc_UpdateEmail_Handler,
		},
		{
			MethodName: "ResetSendPwd",
			Handler:    _Acc_ResetSendPwd_Handler,
		},
		{
			MethodName: "UnbindWechat",
			Handler:    _Acc_UnbindWechat_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Acc_GetToken_Handler,
		},
		{
			MethodName: "GetAccEmails",
			Handler:    _Acc_GetAccEmails_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Acc_GetProfile_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _Acc_GetContact_Handler,
		},
		{
			MethodName: "GetAvatars",
			Handler:    _Acc_GetAvatars_Handler,
		},
		{
			MethodName: "SearchAvatars",
			Handler:    _Acc_SearchAvatars_Handler,
		},
		{
			MethodName: "DeleteAcc",
			Handler:    _Acc_DeleteAcc_Handler,
		},
		{
			MethodName: "StoreAddMach",
			Handler:    _Acc_StoreAddMach_Handler,
		},
		{
			MethodName: "StoreAddComp",
			Handler:    _Acc_StoreAddComp_Handler,
		},
		{
			MethodName: "StoreUpComp",
			Handler:    _Acc_StoreUpComp_Handler,
		},
		{
			MethodName: "StoreBindWx",
			Handler:    _Acc_StoreBindWx_Handler,
		},
		{
			MethodName: "StoreUnbindWx",
			Handler:    _Acc_StoreUnbindWx_Handler,
		},
		{
			MethodName: "CompUnbindWx",
			Handler:    _Acc_CompUnbindWx_Handler,
		},
		{
			MethodName: "CompResetPwd",
			Handler:    _Acc_CompResetPwd_Handler,
		},
		{
			MethodName: "StoreRename",
			Handler:    _Acc_StoreRename_Handler,
		},
		{
			MethodName: "StoreProfile",
			Handler:    _Acc_StoreProfile_Handler,
		},
		{
			MethodName: "StoreProfiles",
			Handler:    _Acc_StoreProfiles_Handler,
		},
		{
			MethodName: "GetActiveEmails",
			Handler:    _Acc_GetActiveEmails_Handler,
		},
		{
			MethodName: "SendCustomMail",
			Handler:    _Acc_SendCustomMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/acc.proto",
}
