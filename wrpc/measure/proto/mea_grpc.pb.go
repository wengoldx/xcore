// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/mea.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeaClient is the client API for Mea service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeaClient interface {
	Predict(ctx context.Context, in *BodySimple, opts ...grpc.CallOption) (*ReqID, error)
	Capture(ctx context.Context, in *BodyCapture, opts ...grpc.CallOption) (*ReqID, error)
	Measure(ctx context.Context, in *BodyComplex, opts ...grpc.CallOption) (*ReqID, error)
	Repredict(ctx context.Context, in *UpSimple, opts ...grpc.CallOption) (*MEmpty, error)
	Recapture(ctx context.Context, in *UpCapture, opts ...grpc.CallOption) (*MEmpty, error)
	Remeasure(ctx context.Context, in *UpComplex, opts ...grpc.CallOption) (*MEmpty, error)
	BodyShot(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*MEmpty, error)
	GetBodys(ctx context.Context, in *ReqIDs, opts ...grpc.CallOption) (*BodyList, error)
	GetBody(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*BodyDetail, error)
	DelBody(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*MEmpty, error)
}

type meaClient struct {
	cc grpc.ClientConnInterface
}

func NewMeaClient(cc grpc.ClientConnInterface) MeaClient {
	return &meaClient{cc}
}

func (c *meaClient) Predict(ctx context.Context, in *BodySimple, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/proto.Mea/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) Capture(ctx context.Context, in *BodyCapture, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/proto.Mea/Capture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) Measure(ctx context.Context, in *BodyComplex, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/proto.Mea/Measure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) Repredict(ctx context.Context, in *UpSimple, opts ...grpc.CallOption) (*MEmpty, error) {
	out := new(MEmpty)
	err := c.cc.Invoke(ctx, "/proto.Mea/Repredict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) Recapture(ctx context.Context, in *UpCapture, opts ...grpc.CallOption) (*MEmpty, error) {
	out := new(MEmpty)
	err := c.cc.Invoke(ctx, "/proto.Mea/Recapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) Remeasure(ctx context.Context, in *UpComplex, opts ...grpc.CallOption) (*MEmpty, error) {
	out := new(MEmpty)
	err := c.cc.Invoke(ctx, "/proto.Mea/Remeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) BodyShot(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*MEmpty, error) {
	out := new(MEmpty)
	err := c.cc.Invoke(ctx, "/proto.Mea/BodyShot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) GetBodys(ctx context.Context, in *ReqIDs, opts ...grpc.CallOption) (*BodyList, error) {
	out := new(BodyList)
	err := c.cc.Invoke(ctx, "/proto.Mea/GetBodys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) GetBody(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*BodyDetail, error) {
	out := new(BodyDetail)
	err := c.cc.Invoke(ctx, "/proto.Mea/GetBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) DelBody(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*MEmpty, error) {
	out := new(MEmpty)
	err := c.cc.Invoke(ctx, "/proto.Mea/DelBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeaServer is the server API for Mea service.
// All implementations must embed UnimplementedMeaServer
// for forward compatibility
type MeaServer interface {
	Predict(context.Context, *BodySimple) (*ReqID, error)
	Capture(context.Context, *BodyCapture) (*ReqID, error)
	Measure(context.Context, *BodyComplex) (*ReqID, error)
	Repredict(context.Context, *UpSimple) (*MEmpty, error)
	Recapture(context.Context, *UpCapture) (*MEmpty, error)
	Remeasure(context.Context, *UpComplex) (*MEmpty, error)
	BodyShot(context.Context, *ReqID) (*MEmpty, error)
	GetBodys(context.Context, *ReqIDs) (*BodyList, error)
	GetBody(context.Context, *ReqID) (*BodyDetail, error)
	DelBody(context.Context, *ReqID) (*MEmpty, error)
	mustEmbedUnimplementedMeaServer()
}

// UnimplementedMeaServer must be embedded to have forward compatible implementations.
type UnimplementedMeaServer struct {
}

func (UnimplementedMeaServer) Predict(context.Context, *BodySimple) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedMeaServer) Capture(context.Context, *BodyCapture) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedMeaServer) Measure(context.Context, *BodyComplex) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Measure not implemented")
}
func (UnimplementedMeaServer) Repredict(context.Context, *UpSimple) (*MEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Repredict not implemented")
}
func (UnimplementedMeaServer) Recapture(context.Context, *UpCapture) (*MEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recapture not implemented")
}
func (UnimplementedMeaServer) Remeasure(context.Context, *UpComplex) (*MEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remeasure not implemented")
}
func (UnimplementedMeaServer) BodyShot(context.Context, *ReqID) (*MEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BodyShot not implemented")
}
func (UnimplementedMeaServer) GetBodys(context.Context, *ReqIDs) (*BodyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBodys not implemented")
}
func (UnimplementedMeaServer) GetBody(context.Context, *ReqID) (*BodyDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBody not implemented")
}
func (UnimplementedMeaServer) DelBody(context.Context, *ReqID) (*MEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBody not implemented")
}
func (UnimplementedMeaServer) mustEmbedUnimplementedMeaServer() {}

// UnsafeMeaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeaServer will
// result in compilation errors.
type UnsafeMeaServer interface {
	mustEmbedUnimplementedMeaServer()
}

func RegisterMeaServer(s grpc.ServiceRegistrar, srv MeaServer) {
	s.RegisterService(&Mea_ServiceDesc, srv)
}

func _Mea_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodySimple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).Predict(ctx, req.(*BodySimple))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_Capture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyCapture)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).Capture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/Capture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).Capture(ctx, req.(*BodyCapture))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_Measure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyComplex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).Measure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/Measure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).Measure(ctx, req.(*BodyComplex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_Repredict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpSimple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).Repredict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/Repredict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).Repredict(ctx, req.(*UpSimple))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_Recapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCapture)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).Recapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/Recapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).Recapture(ctx, req.(*UpCapture))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_Remeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpComplex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).Remeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/Remeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).Remeasure(ctx, req.(*UpComplex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_BodyShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).BodyShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/BodyShot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).BodyShot(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_GetBodys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).GetBodys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/GetBodys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).GetBodys(ctx, req.(*ReqIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_GetBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).GetBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/GetBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).GetBody(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_DelBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).DelBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/DelBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).DelBody(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

// Mea_ServiceDesc is the grpc.ServiceDesc for Mea service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mea_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mea",
	HandlerType: (*MeaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Mea_Predict_Handler,
		},
		{
			MethodName: "Capture",
			Handler:    _Mea_Capture_Handler,
		},
		{
			MethodName: "Measure",
			Handler:    _Mea_Measure_Handler,
		},
		{
			MethodName: "Repredict",
			Handler:    _Mea_Repredict_Handler,
		},
		{
			MethodName: "Recapture",
			Handler:    _Mea_Recapture_Handler,
		},
		{
			MethodName: "Remeasure",
			Handler:    _Mea_Remeasure_Handler,
		},
		{
			MethodName: "BodyShot",
			Handler:    _Mea_BodyShot_Handler,
		},
		{
			MethodName: "GetBodys",
			Handler:    _Mea_GetBodys_Handler,
		},
		{
			MethodName: "GetBody",
			Handler:    _Mea_GetBody_Handler,
		},
		{
			MethodName: "DelBody",
			Handler:    _Mea_DelBody_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mea.proto",
}
